C51 COMPILER V9.53.0.0   I2C                                                               12/17/2015 20:55:29 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN I2C.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE I2C.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //***********************************      I2C.c      ***********************************//
   2          
   3          
   4          #include "Main.h"
   5          #include "PORT.H"
   6          #include "I2C.h"
   7          #include <stdio.h>
   8          
   9          /********************************************************************
  10          
  11          Private Function Declarations
  12          
  13          *********************************************************************/
  14          #define I2C_FREQ (25000UL)
  15          #define I2C_RELOAD (65536-((OSC_FREQ)/(OSC_PER_INST*I2C_FREQ*2)))
  16          #define I2C_RELOAD_H (I2C_RELOAD/256)
  17          #define I2C_RELOAD_L (I2C_RELOAD%256)
  18          
  19          #define Continue (1)
  20          #define Stop (2)
  21          
  22          
  23          void I2C_clock_start(void);
  24          void I2C_clock_delay(uint8_t control);
  25          
  26          /***********************************************************************
  27          DESC:    Creates the signals required for transmitting bytes using
  28                   the I2C bus.
  29          RETURNS: Error Flag
  30          CAUTION: 
  31                    
  32          ************************************************************************/
  33          
  34          uint8_t I2C_Write(uint8_t device_addr,uint8_t num_bytes,uint8_t * send_array)
  35          {
  36   1        uint8_t send_val, return_val, num_bits, send_bit, sent_bit;
  37   1      
  38   1        SDA=1;
  39   1        SCL=1;
  40   1        return_val=no_errors;
  41   1        if((SCL==1) && (SDA==1))
  42   1        {
  43   2           I2C_clock_start();
  44   2           send_val=device_addr<<1;
  45   2         send_val&=0xFE;           // make sure lsb is 0 for write
  46   2         //  send START condition
  47   2         SDA=0;
  48   2         num_bytes++;
  49   2         do
  50   2         {
  51   3            num_bits=8;
  52   3              do
  53   3          {
  54   4             I2C_clock_delay(Continue);
  55   4             SCL=0;
C51 COMPILER V9.53.0.0   I2C                                                               12/17/2015 20:55:29 PAGE 2   

  56   4             num_bits--;
  57   4                 send_bit=((send_val>>num_bits)&0x01);
  58   4             SDA=(bit)send_bit;
  59   4             I2C_clock_delay(Continue);
  60   4                 SCL=1;
  61   4             while(SCL!=1);
  62   4                 sent_bit=SDA;
  63   4             if(sent_bit!=send_bit) return_val=bus_busy_error;
  64   4               }while((num_bits>0)&&(return_val==no_errors));
  65   3           I2C_clock_delay(Continue);
  66   3           SCL=0;
  67   3               SDA=1;      // set SDA high so slave can send ACK
  68   3               num_bytes--;
  69   3           send_val=*(send_array);
  70   3           send_array++;
  71   3           I2C_clock_delay(Continue);
  72   3           SCL=1;
  73   3           while(SCL!=1);
  74   3           sent_bit=SDA;
  75   3           if(sent_bit!=0) return_val=NACK_error;
  76   3            }while((num_bytes>0)&&(return_val==no_errors));
  77   2            // send STOP condition
  78   2          I2C_clock_delay(Continue);
  79   2            SCL=0;
  80   2          SDA=0;
  81   2          I2C_clock_delay(Continue);
  82   2          SCL=1;
  83   2          while(SCL!=1);
  84   2          I2C_clock_delay(Stop);
  85   2          SDA=1;
  86   2        }
  87   1        else
  88   1        { 
  89   2           return_val=bus_busy_error;
  90   2        }
  91   1        return return_val;
  92   1      }
  93          
  94          /***********************************************************************
  95          DESC:    Creates the signals required for receiving bytes using
  96                   the I2C bus.
  97          RETURNS: Error Flag
  98          CAUTION: 
  99                    
 100          ************************************************************************/
 101          
 102          
 103          uint8_t I2C_Read(uint8_t device_addr,uint8_t num_bytes,uint8_t * rec_array)
 104          {
 105   1        uint8_t send_val, return_val, num_bits, send_bit, sent_bit,rcv_val;
 106   1      
 107   1        SDA=1;
 108   1        SCL=1;
 109   1        return_val=no_errors;
 110   1        if((SCL==1) && (SDA==1))
 111   1        {
 112   2           I2C_clock_start();
 113   2           send_val=device_addr<<1;
 114   2         send_val|=0x01;           // make sure lsb is 1 for read
 115   2         //  send START condition
 116   2         SDA=0;
 117   2         //  send device address+R
C51 COMPILER V9.53.0.0   I2C                                                               12/17/2015 20:55:29 PAGE 3   

 118   2         num_bits=8;
 119   2           do
 120   2         {
 121   3          I2C_clock_delay(Continue);
 122   3            SCL=0;
 123   3          num_bits--;
 124   3              send_bit=((send_val>>num_bits)&0x01);
 125   3          SDA=(bit)send_bit;
 126   3          I2C_clock_delay(Continue);
 127   3              SCL=1;
 128   3          while(SCL!=1);
 129   3              sent_bit=SDA;
 130   3          if(sent_bit!=send_bit) return_val=bus_busy_error;
 131   3            }while((num_bits>0)&&(return_val==no_errors));
 132   2          I2C_clock_delay(Continue);
 133   2          SCL=0;
 134   2            SDA=1;      // set SDA high so slave can send ACK
 135   2          I2C_clock_delay(Continue);
 136   2          SCL=1;
 137   2          while(SCL!=1);
 138   2          sent_bit=SDA;
 139   2          if(sent_bit!=0) return_val=NACK_error;
 140   2            while((num_bytes>0)&&(return_val==no_errors))
 141   2          {
 142   3             num_bits=8;
 143   3             do
 144   3           {
 145   4             I2C_clock_delay(Continue);
 146   4             SCL=0;
 147   4             num_bits--;
 148   4             SDA=1;
 149   4             rcv_val=rcv_val<<1;  // shift value to prepare for next rcvd bit
 150   4             I2C_clock_delay(Continue);
 151   4             SCL=1;
 152   4             while(SCL!=1);
 153   4                 sent_bit=SDA;
 154   4             rcv_val|=sent_bit;
 155   4           }while(num_bits>0);
 156   3           *rec_array=rcv_val;
 157   3           rec_array++;
 158   3           if(num_bytes==1)
 159   3           {
 160   4              send_bit=1;   // NACK for last byte
 161   4           }
 162   3           else
 163   3           {
 164   4              send_bit=0;   // ACK if more bytes are to be received
 165   4           }
 166   3           I2C_clock_delay(Continue);
 167   3           SCL=0;
 168   3           SDA=send_bit;
 169   3           I2C_clock_delay(Continue);
 170   3           SCL=1;
 171   3           while(SCL!=1);
 172   3           num_bytes--;
 173   3          }
 174   2            // send STOP condition
 175   2          I2C_clock_delay(Continue);
 176   2            SCL=0;
 177   2          SDA=0;
 178   2          I2C_clock_delay(Continue);
 179   2          SCL=1;
C51 COMPILER V9.53.0.0   I2C                                                               12/17/2015 20:55:29 PAGE 4   

 180   2          while(SCL!=1);
 181   2          I2C_clock_delay(Stop);
 182   2          SDA=1;
 183   2        }
 184   1        else
 185   1        { 
 186   2           return_val=bus_busy_error;
 187   2        }
 188   1        return return_val;
 189   1      }
 190          
 191          /***********************************************************************
 192          DESC:    Initializes and starts Timer0 for a hardware delay for 
 193                   creating a consistant I2C frequency
 194          RETURNS: nothing
 195          CAUTION: 
 196                    
 197          ************************************************************************/
 198          
 199          void I2C_clock_start(void)
 200          {
 201   1      // Configure Timer0 as a 16-bit timer (mode1)
 202   1         TMOD &=0xF0;
 203   1         TMOD |=0x01;
 204   1      
 205   1         ET0=0;  //interrupts not used
 206   1      
 207   1         TH0=I2C_RELOAD_H;
 208   1         TL0=I2C_RELOAD_L;
 209   1      
 210   1         TF0=0;   // Clear overflow
 211   1         TR0=1;   // Start Timer Running
 212   1      }
 213          
 214          
 215          /***********************************************************************
 216          DESC:    Waits for the overflow to be set and restarts Timer0 for a  
 217                   hardware delay for creating a consistant I2C frequency
 218               Timer is stopped if stop is sent.
 219          RETURNS: nothing
 220          CAUTION: 
 221                    
 222          ************************************************************************/
 223          
 224          void I2C_clock_delay(uint8_t control)
 225          {
 226   1         if(TR0==1)
 227   1         { 
 228   2           while(TF0==0);
 229   2         }
 230   1      
 231   1         TR0=0;
 232   1         if(control==Continue)
 233   1         {
 234   2            TH0=I2C_RELOAD_H;
 235   2            TL0=I2C_RELOAD_L;
 236   2      
 237   2            TF0=0;   // Clear overflow
 238   2            TR0=1;   // Start Timer Running
 239   2         }
 240   1      }
 241          
C51 COMPILER V9.53.0.0   I2C                                                               12/17/2015 20:55:29 PAGE 5   

 242          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    532    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
