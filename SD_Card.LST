C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SD_CARD
OBJECT MODULE PLACED IN SD_Card.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SD_Card.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //***********************************      SD_Card.c      ***********************************//
   2          
   3          
   4          #include "AT89C51RC2.h"
   5          #include "PORT.H"
   6          #include "Main.h"
   7          #include "SD_Card.h"
   8          #include "Print_Bytes.h"
   9          #include "SPI.h"
  10          #include <stdio.h>
  11          
  12          static uint8_t  idata SD_Card_Type;
  13          
  14          /***********************************************************************
  15          DESC:    Sends Commands to SD card using the SPI peripheral
  16                   cmnd=Command number to be sent
  17                   argum=32bit argument for a command
  18          RETURNS: error flag
  19          CAUTION: Must be followed by a read to capture SD card response
  20                   nCS0 must be set/cleared outside of this routine 
  21          ************************************************************************/
  22          uint8_t SEND_COMMAND(uint8_t cmnd, uint32_t argum)
  23          {
  24   1       uint8_t SPI_send, return_val, SPI_return, error_flag;
  25   1      
  26   1       return_val=no_errors;
  27   1       if(cmnd<64)
  28   1       {
  29   2         SPI_send=cmnd | 0x40;
  30   2         error_flag=SPI_Transfer(SPI_send,&SPI_return);
  31   2         if((error_flag)==no_errors)
  32   2         {
  33   3           SPI_send=argum>>24;   // MSB
  34   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  35   3         }
  36   2         else
  37   2         {
  38   3           return_val=SPI_error;
  39   3         }
  40   2         if((return_val==no_errors)&&(error_flag==no_errors))
  41   2         {
  42   3           argum=argum & 0x00ffffff;
  43   3           SPI_send=argum>>16;  // BYTE2
  44   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  45   3         }
  46   2         else
  47   2         {
  48   3           return_val=SPI_error;
  49   3         }
  50   2         if((return_val==no_errors)&&(error_flag==no_errors))
  51   2         {
  52   3           argum=argum & 0x0000ffff;
  53   3           SPI_send=argum>>8;   // BYTE1
  54   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  55   3         }
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 2   

  56   2         else
  57   2         {
  58   3           return_val=SPI_error;
  59   3         }     
  60   2         if((return_val==no_errors)&&(error_flag==no_errors))
  61   2         {
  62   3           SPI_send=argum & 0x000000ff;  // LSB
  63   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  64   3         }
  65   2         else
  66   2         {
  67   3           return_val=SPI_error;
  68   3         }
  69   2         if((return_val==no_errors)&&(error_flag==no_errors))
  70   2         {         
  71   3            if (cmnd == 0)
  72   3            {
  73   4               SPI_send=0x95;  // CRC7 and end bit for CMD0
  74   4            }
  75   3            else if (cmnd == 8)
  76   3            {
  77   4               SPI_send=0x87;   // CRC7 and end bit for CMD8
  78   4            }
  79   3            else
  80   3            {
  81   4               SPI_send=0x01;  // end bit only for other commands
  82   4            }
  83   3            error_flag=SPI_Transfer(SPI_send,&SPI_return);
  84   3          }
  85   2       }
  86   1       else
  87   1       {
  88   2         return_val=illegal_cmnd;
  89   2       }
  90   1       return return_val;  
  91   1      }
  92          
  93          uint8_t SEND_COMMAND_ISR(uint8_t cmnd, uint32_t argum)
  94          {
  95   1       uint8_t idata SPI_send, return_val, SPI_return, error_flag;
  96   1      
  97   1       return_val=no_errors;
  98   1       if(cmnd<64)
  99   1       {
 100   2         SPI_send=cmnd | 0x40;
 101   2         error_flag=SPI_Transfer(SPI_send,&SPI_return);
 102   2         if((error_flag)==no_errors)
 103   2         {
 104   3           SPI_send=argum>>24;   // MSB
 105   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
 106   3         }
 107   2         else
 108   2         {
 109   3           return_val=SPI_error;
 110   3         }
 111   2         if((return_val==no_errors)&&(error_flag==no_errors))
 112   2         {
 113   3           argum=argum & 0x00ffffff;
 114   3           SPI_send=argum>>16;  // BYTE2
 115   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
 116   3         }
 117   2         else
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 3   

 118   2         {
 119   3           return_val=SPI_error;
 120   3         }
 121   2         if((return_val==no_errors)&&(error_flag==no_errors))
 122   2         {
 123   3           argum=argum & 0x0000ffff;
 124   3           SPI_send=argum>>8;   // BYTE1
 125   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
 126   3         }
 127   2         else
 128   2         {
 129   3           return_val=SPI_error;
 130   3         }     
 131   2         if((return_val==no_errors)&&(error_flag==no_errors))
 132   2         {
 133   3           SPI_send=argum & 0x000000ff;  // LSB
 134   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
 135   3         }
 136   2         else
 137   2         {
 138   3           return_val=SPI_error;
 139   3         }
 140   2         if((return_val==no_errors)&&(error_flag==no_errors))
 141   2         {         
 142   3            if (cmnd == 0)
 143   3            {
 144   4               SPI_send=0x95;  // CRC7 and end bit for CMD0
 145   4            }
 146   3            else if (cmnd == 8)
 147   3            {
 148   4               SPI_send=0x87;   // CRC7 and end bit for CMD8
 149   4            }
 150   3            else
 151   3            {
 152   4               SPI_send=0x01;  // end bit only for other commands
 153   4            }
 154   3            error_flag=SPI_Transfer(SPI_send,&SPI_return);
 155   3          }
 156   2       }
 157   1       else
 158   1       {
 159   2         return_val=illegal_cmnd;
 160   2       }
 161   1       return return_val;  
 162   1      }
 163          
 164          /***********************************************************************
 165          DESC:    Read values from SPI port, 0xff sent for each byte read 
 166               num_bytes=number of bytes to read
 167          RETURNS: error flag
 168                   *valout=address of array of bytes read
 169          CAUTION: Used to capture SD card response
 170                   nCS0 must be set/cleared outside of this routine 
 171          ************************************************************************/
 172          uint8_t response(uint8_t num_bytes, uint8_t * valout)
 173          {
 174   1         uint8_t index,return_val,error_flag, SPI_return;
 175   1      
 176   1         return_val=no_errors;
 177   1         do
 178   1         {
 179   2            error_flag=SPI_Transfer(0xFF,&SPI_return);
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 4   

 180   2            index++;
 181   2         }while(((SPI_return&0x80)==0x80)&&(index!=0)&&(error_flag==no_errors));
 182   1         if(error_flag!=no_errors)
 183   1         {
 184   2            return_val=SPI_error;
 185   2         }
 186   1         else if(index==0)
 187   1         {
 188   2            return_val=timeout_error;
 189   2         }
 190   1         else
 191   1         {
 192   2           *valout=SPI_return;
 193   2           if((SPI_return==0x00)||(SPI_return==0x01))
 194   2           {
 195   3             if(num_bytes>1)
 196   3             {
 197   4               for(index=1;index<num_bytes;index++)
 198   4               {
 199   5                  error_flag=SPI_Transfer(0xFF,&SPI_return);
 200   5                  *(valout+index)=SPI_return;
 201   5               }
 202   4             }
 203   3           }
 204   2           else
 205   2           {
 206   3              return_val=response_error;
 207   3           }
 208   2         }
 209   1         error_flag=SPI_Transfer(0xFF,&SPI_return);  // send 8 more clock cycles to complete read
 210   1         return return_val;
 211   1      }
 212          
 213          
 214          /**********************************************************************
 215          DESC:    Reads a specifed number of bytes from SD card,
 216                   0xff sent for each byte read 
 217          RETURNS: error flag
 218                   block of data stored in array_out[]
 219          CAUTION: Used to capture SD card response
 220                   nCS0 must be set/cleared outside of this routine 
 221          ************************************************************************/
 222          uint8_t read_block(uint16_t num_bytes, uint8_t * array_out)
 223          {
 224   1         uint8_t error_flag,return_val,SPI_return;
 225   1         uint16_t index;
 226   1         index=0;
 227   1         return_val=no_errors;
 228   1         do
 229   1         {
 230   2            error_flag=SPI_Transfer(0xFF,&SPI_return);
 231   2            index++;
 232   2         }while(((SPI_return&0x80)==0x80)&&(index!=0)&&(error_flag==no_errors));
 233   1         if(error_flag!=no_errors)
 234   1         {
 235   2            return_val=SPI_error;
 236   2         }
 237   1         else if(index==0)
 238   1         {
 239   2            return_val=timeout_error;
 240   2         }
 241   1         else
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 5   

 242   1         {
 243   2           if (SPI_return==0x00)
 244   2           {
 245   3              index=0;
 246   3            do
 247   3              { 
 248   4                 error_flag=SPI_Transfer(0xFF,&SPI_return); 
 249   4                 index++;
 250   4              }while((SPI_return==0xFF)&&(index!=0)&&(error_flag==no_errors));          // wait for data token r
             -esponse  
 251   3              if(error_flag!=no_errors)
 252   3              {
 253   4                 return_val=SPI_error;
 254   4              }
 255   3              else if(index==0)
 256   3              {
 257   4                return_val=timeout_error;
 258   4              }
 259   3              else if(SPI_return==0xfe)
 260   3              {
 261   4                for(index=0;index<num_bytes;index++)
 262   4                {
 263   5                   error_flag=SPI_Transfer(0xFF,&SPI_return);
 264   5                   *(array_out + index)=SPI_return;
 265   5                }
 266   4                error_flag=SPI_Transfer(0xFF,&SPI_return); // discard byte 1 of CRC16 
 267   4                error_flag=SPI_Transfer(0xFF,&SPI_return); // discard byte 2 of CRC16
 268   4              }
 269   3            else
 270   3            {
 271   4              return_val=data_error;
 272   4            }
 273   3           }
 274   2           else
 275   2           {
 276   3              return_val=response_error;
 277   3           }
 278   2         }
 279   1       error_flag=SPI_Transfer(0xFF,&SPI_return);// send 8 more clock cycles to complete read
 280   1      return return_val;
 281   1      }
 282          
 283          uint8_t read_block_ISR(uint16_t num_bytes, uint8_t * array_out)
 284          {
 285   1         uint8_t idata error_flag,return_val,SPI_return;
 286   1         uint16_t idata index;
 287   1         index=0;
 288   1         return_val=no_errors;
 289   1         do
 290   1         {
 291   2            error_flag=SPI_Transfer(0xFF,&SPI_return);
 292   2            index++;
 293   2         }while(((SPI_return&0x80)==0x80)&&(index!=0)&&(error_flag==no_errors));
 294   1         if(error_flag!=no_errors)
 295   1         {
 296   2            return_val=SPI_error;
 297   2         }
 298   1         else if(index==0)
 299   1         {
 300   2            return_val=timeout_error;
 301   2         }
 302   1         else
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 6   

 303   1         {
 304   2           if (SPI_return==0x00)
 305   2           {
 306   3              index=0;
 307   3            do
 308   3              { 
 309   4                 error_flag=SPI_Transfer(0xFF,&SPI_return); 
 310   4                 index++;
 311   4              }while((SPI_return==0xFF)&&(index!=0)&&(error_flag==no_errors));          // wait for data token r
             -esponse  
 312   3              if(error_flag!=no_errors)
 313   3              {
 314   4                 return_val=SPI_error;
 315   4              }
 316   3              else if(index==0)
 317   3              {
 318   4                return_val=timeout_error;
 319   4              }
 320   3              else if(SPI_return==0xfe)
 321   3              {
 322   4                for(index=0;index<num_bytes;index++)
 323   4                {
 324   5                   error_flag=SPI_Transfer(0xFF,&SPI_return);
 325   5                   *(array_out + index)=SPI_return;
 326   5                }
 327   4                error_flag=SPI_Transfer(0xFF,&SPI_return); // discard byte 1 of CRC16 
 328   4                error_flag=SPI_Transfer(0xFF,&SPI_return); // discard byte 2 of CRC16
 329   4              }
 330   3            else
 331   3            {
 332   4              return_val=data_error;
 333   4            }
 334   3           }
 335   2           else
 336   2           {
 337   3              return_val=response_error;
 338   3           }
 339   2         }
 340   1       error_flag=SPI_Transfer(0xFF,&SPI_return);// send 8 more clock cycles to complete read
 341   1      return return_val;
 342   1      }
 343          
 344          
 345          /**********************************************************************
 346          DESC:    Sends the commands needed to initialize the SD card 
 347          RETURNS: error flag
 348          CAUTION:  
 349          ************************************************************************/
 350          uint8_t SD_card_init(void)
 351          {
 352   1         uint8_t i,error_status,error_flag,valsout[8],SPI_return;
 353   1         uint32_t argument;
 354   1         uint16_t timeout;
 355   1         error_status=no_errors;
 356   1         SD_Card_Type=unknown;
 357   1         nCS0=1;
 358   1         printf("SD Card Initialization ... \n\r");
 359   1         for(i=0;i<10;i++)
 360   1         {
 361   2             error_flag=SPI_Transfer(0xFF,&SPI_return);
 362   2         }
 363   1         GREENLED=0;
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 7   

 364   1         printf("CMD0 sent ... ");   
 365   1         nCS0=0;  // CS card CS low
 366   1         error_flag=SEND_COMMAND(CMD0,0);
 367   1         if(error_flag==no_errors)
 368   1         {
 369   2           error_flag=response(1,valsout);
 370   2         nCS0=1;
 371   2           GREENLED=1;
 372   2           printf("Response = %2.2bX\n\r",valsout[0]);
 373   2         }
 374   1         else
 375   1         {
 376   2           nCS0=1;
 377   2         GREENLED=1;
 378   2         REDLED=0;  // indicates error has occured.
 379   2         }
 380   1         if(error_flag!=no_errors)
 381   1         {
 382   2           error_status=error_flag;
 383   2         }
 384   1         if(error_status==no_errors)
 385   1         {
 386   2           GREENLED=0;
 387   2           printf("CMD8 sent ... ");
 388   2           nCS0=0;
 389   2           error_flag=SEND_COMMAND(CMD8,0x000001AA);
 390   2         if(error_flag==no_errors)
 391   2           {
 392   3              error_flag=response(5,valsout);
 393   3          nCS0=1;
 394   3          GREENLED=1;
 395   3            printf("Response = ");
 396   3              for(i=0;i<5;i++)
 397   3          {   
 398   4                  printf("%2.2bX ",valsout[i]);
 399   4          }
 400   3              putchar(CR);
 401   3              putchar(LF);
 402   3          if(valsout[4]!=0xAA)
 403   3          {
 404   4             error_flag=response_error;
 405   4          }
 406   3           }
 407   2           else
 408   2           {
 409   3              nCS0=1;
 410   3              GREENLED=1;
 411   3            REDLED=0;  // indicates error has occured.
 412   3           }
 413   2         if(error_flag!=no_errors)
 414   2         {
 415   3              if(error_flag==illegal_cmnd)
 416   3              {
 417   4                 error_status=no_errors;
 418   4             SD_Card_Type=Standard_Capacity;
 419   4             printf("Version 1 SD Card detected.\n\r");
 420   4             printf("Standard Capacity Card detected.\n\r");
 421   4              }
 422   3          else
 423   3          {
 424   4             error_status=error_flag;
 425   4          }
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 8   

 426   3         }
 427   2         else
 428   2         {
 429   3          SD_Card_Type=Ver2;
 430   3          printf("Version 2 SD Card detected.\n\r");
 431   3         }
 432   2         }
 433   1         if(error_status==no_errors)
 434   1         {
 435   2           GREENLED=0;
 436   2           printf("CMD58 sent ... ");
 437   2           nCS0=0;
 438   2           error_flag=SEND_COMMAND(CMD58,0);
 439   2         if(error_flag==no_errors)
 440   2           {
 441   3              error_flag=response(5,valsout);
 442   3          nCS0=1;
 443   3          GREENLED=1;
 444   3            printf("Response = ");
 445   3              for(i=0;i<5;i++)
 446   3          {   
 447   4               printf("%2.2bX ",valsout[i]);
 448   4          }
 449   3              putchar(CR);
 450   3              putchar(LF);
 451   3          if((valsout[2]&0xFC)!=0xFC)
 452   3          {
 453   4             error_flag=voltage_error;
 454   4          }
 455   3           }
 456   2           else
 457   2           {
 458   3              nCS0=1;
 459   3              GREENLED=1;
 460   3            REDLED=0;  // indicates error has occured.
 461   3           }
 462   2         if(error_flag!=no_errors)
 463   2         {    
 464   3            error_status=error_flag;
 465   3         }
 466   2         }
 467   1         if(error_status==no_errors)
 468   1         {
 469   2           if(SD_Card_Type==Ver2)
 470   2         {
 471   3            argument=0x40000000;
 472   3         }
 473   2         else
 474   2         {
 475   3            argument=0;
 476   3         }
 477   2         timeout=0;
 478   2           GREENLED=0;
 479   2           printf("ACMD41 sent ... ");
 480   2           nCS0=0;
 481   2         do
 482   2         {
 483   3            P3_5=0;
 484   3            error_flag=SEND_COMMAND(CMD55,0);
 485   3          if(error_flag==no_errors)  error_flag=response(1,valsout);
 486   3          P3_5=1;
 487   3            if((valsout[0]==0x01)||(valsout[0]==0x00))
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 9   

 488   3             error_flag=SEND_COMMAND(ACMD41,argument);
 489   3            if(error_flag==no_errors) response(1,valsout);
 490   3          timeout++;
 491   3          if(timeout==0) error_flag=timeout_error;
 492   3           }while(((valsout[0]&0x01)==0x01)&&(error_flag==no_errors));
 493   2         if(error_flag==no_errors)
 494   2           {
 495   3          nCS0=1;
 496   3              GREENLED=1;
 497   3            printf("Response = %2.2bX\n\r",valsout[0]);
 498   3           }
 499   2           else
 500   2           {
 501   3              nCS0=1;
 502   3              GREENLED=1;
 503   3            REDLED=0;  // indicates error has occured.
 504   3           }
 505   2         if(error_flag!=no_errors)
 506   2         {    
 507   3            error_status=error_flag;
 508   3         }
 509   2         }
 510   1         if((error_status==no_errors)&&(SD_Card_Type==Ver2))
 511   1         {
 512   2           GREENLED=0;
 513   2           printf("CMD58 sent ... ");
 514   2           nCS0=0;
 515   2           error_flag=SEND_COMMAND(CMD58,0);
 516   2         if(error_flag==no_errors)
 517   2           {
 518   3              error_flag=response(5,valsout);
 519   3          nCS0=1;
 520   3              GREENLED=1;
 521   3            printf("Response = ");
 522   3              for(i=0;i<5;i++)
 523   3          {   
 524   4                 printf("%2.2bX ",valsout[i]);
 525   4          }
 526   3              putchar(CR);
 527   3              putchar(LF);
 528   3          if((valsout[1]&0x80)!=0x80)
 529   3          {
 530   4             error_flag=card_inactive;
 531   4          }
 532   3          else
 533   3          {
 534   4             if((valsout[1]&0xC0)==0xC0)
 535   4             {
 536   5                SD_Card_Type=High_Capacity;
 537   5                printf("High Capacity Card Detected\n\r");
 538   5             }
 539   4             else
 540   4             {
 541   5                SD_Card_Type=Standard_Capacity;
 542   5              printf("Standard Capacity Card Detected\n\r");
 543   5              GREENLED=0;
 544   5                    printf("CMD16 sent ... ");
 545   5                    nCS0=0;
 546   5                    error_flag=SEND_COMMAND(CMD16,512);
 547   5                  if(error_flag==no_errors)
 548   5                    {
 549   6                        error_flag=response(1,valsout);
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 10  

 550   6                    nCS0=1;
 551   6                        GREENLED=1;
 552   6                      printf("Response = %2.2bX \n\r",valsout[0]);
 553   6                        printf("Block size set to 512 bytes\n\r");
 554   6                }
 555   5            }
 556   4           }
 557   3           }
 558   2           else
 559   2           {
 560   3              nCS0=1;
 561   3              GREENLED=1;
 562   3            REDLED=0;  // indicates error has occured.
 563   3           }
 564   2         if(error_flag!=no_errors)
 565   2         {    
 566   3            error_status=error_flag;
 567   3          print_error(error_status);
 568   3         }
 569   2         }
 570   1       if(error_status!=no_errors)
 571   1       {    
 572   2        print_error(error_status);
 573   2       }
 574   1      return error_status;
 575   1      }
 576          
 577          /**********************************************************************
 578          DESC:    Returns the SD card type 
 579          RETURNS: SD_Card_Type
 580          CAUTION: SD card must be initialized first
 581          ************************************************************************/
 582          
 583          uint8_t Return_SD_Card_Type(void)
 584          {
 585   1         return SD_Card_Type;
 586   1      }
 587          
 588          /**********************************************************************
 589          DESC:    Prints an error text based on the error code  
 590          RETURNS: nothing
 591          CAUTION: Mainly used for debugging
 592          ***********************************************************************/
 593          
 594          
 595          void print_error(uint8_t error)
 596          {
 597   1         if(error==timeout_error) printf("Timeout Error");
 598   1         else if(error==illegal_cmnd) printf("Illegal Command\n\r");
 599   1         else if(error==response_error) printf("Response Error");
 600   1         else if(error==data_error) printf("Data Token Error");
 601   1         else if(error==voltage_error) printf("Incompatible Voltage");
 602   1         else if(error==card_inactive) printf("Card is Inactive");
 603   1         else if(error==SPI_error) printf("SPI or Timeout Error");
 604   1         else printf("Unknown Error");
 605   1      }
 606          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2122    ----
   CONSTANT SIZE    =    496    ----
C51 COMPILER V9.53.0.0   SD_CARD                                                           12/17/2015 21:01:32 PAGE 11  

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      53
   IDATA SIZE       =      1       9
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
