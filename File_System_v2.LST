C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FILE_SYSTEM_V2
OBJECT MODULE PLACED IN File_System_v2.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE File_System_v2.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //***********************************      File_System_v2.c      ***********************************//
   2          
   3          
   4          #include "AT89C51RC2.h"
   5          #include <stdio.h>
   6          #include "Main.h"
   7          #include "PORT.H"
   8          #include "UART.h"
   9          #include "SPI.h"
  10          #include "SD_Card.h"
  11          #include "File_System_v2.h"
  12          #include "Print_Bytes.h"
  13          #include "Directory_Functions_struct.h"
  14          #include "Read_Sector.h"
  15          #include "Play_Song.h"
  16          
  17          
  18          
  19          
  20          // Read Value Functions
  21          
  22          /***********************************************************************
  23          DESC: Reads a specified byte from a block of memory 
  24          INPUT: Offset to the byte, Starting address of the block of memory
  25          RETURNS: uint8_t specifed byte
  26          CAUTION: 
  27          ************************************************************************/
  28          uint8_t read8(uint16_t offset, uint8_t * array_name)
  29          {
  30   1         uint8_t return_val;
  31   1         offset&=0x1FF;  // limit offset to 0 to 511
  32   1         return_val=*(array_name+offset);
  33   1         return return_val;
  34   1      }
  35          
  36          /***********************************************************************
  37          DESC: Reads a specified integer (stored little endian) from a block of memory 
  38          INPUT: Offset to the LSB of the integer, Starting address of the block of memory
  39          RETURNS: uint16_t specfied integer
  40          CAUTION: 
  41          ************************************************************************/
  42          
  43          uint16_t read16(uint16_t offset, uint8_t * array_name)
  44          {
  45   1         uint16_t return_val,temp;
  46   1         offset&=0x1FF;  // limit offset to 0 to 511
  47   1         return_val=0;
  48   1         return_val=*(array_name+offset+1);
  49   1         return_val=return_val<<8;
  50   1         temp=*(array_name+offset);
  51   1         return_val|=temp;
  52   1         return return_val;
  53   1      }
  54          
  55          uint16_t read16_ISR(uint16_t offset, uint8_t * array_name)
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 2   

  56          {
  57   1         uint16_t idata return_val,temp;
  58   1         offset&=0x1FF;  // limit offset to 0 to 511
  59   1         return_val=0;
  60   1         return_val=*(array_name+offset+1);
  61   1         return_val=return_val<<8;
  62   1         temp=*(array_name+offset);
  63   1         return_val|=temp;
  64   1         return return_val;
  65   1      }
  66          
  67          /***********************************************************************
  68          DESC: Reads a specified word (stored little endian) from a block of memory 
  69          INPUT: Offset to the LSB of the word, Starting address of the block of memory
  70          RETURNS: uint32_t specfied word
  71          CAUTION: 
  72          ************************************************************************/
  73          
  74          uint32_t read32(uint16_t offset, uint8_t * array_name)
  75          {
  76   1         uint32_t return_val;
  77   1         uint8_t temp, i;
  78   1         return_val=0;
  79   1         offset&=0x1FF;  // limit offset to 0 to 511
  80   1         for(i=0;i<4;i++)
  81   1         {   
  82   2             temp=*(array_name+offset+(3-i));
  83   2             return_val=return_val<<8;
  84   2             return_val|=temp;
  85   2         }
  86   1         return return_val;
  87   1      }
  88          
  89          uint32_t read32_ISR(uint16_t offset, uint8_t * array_name)
  90          {
  91   1         uint32_t idata return_val;
  92   1         uint8_t idata temp, i;
  93   1         return_val=0;
  94   1         offset&=0x1FF;  // limit offset to 0 to 511
  95   1         for(i=0;i<4;i++)
  96   1         {   
  97   2             temp=*(array_name+offset+(3-i));
  98   2             return_val=return_val<<8;
  99   2             return_val|=temp;
 100   2         }
 101   1         return return_val;
 102   1      }
 103          
 104          /***********************************************************************
 105          DESC: Determines FAT type, Start of the FAT, Root Directory Sector
 106                and Start of Data for an SD card
 107          INPUT: Start of a block of memory in xdata that can be used 
 108                 to read blocks from the SD card
 109          RETURNS: uint8_t error code    Creates globals in idata for: 
 110          idata uint32_t FATSz, RelSec, RootClus, FirstDataSec, StartofFAT;
 111          idata uint16_t BytesPerSec, BytesPerSecM, RootEntCnt;
 112          idata uint8_t SecPerClus, FATtype, SecShift;
 113          
 114          CAUTION: 
 115          ************************************************************************/
 116          
 117          uint8_t Mount_Drive(uint8_t xdata * array_in)
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 3   

 118          {
 119   1        uint32_t TotSec, DataSec, CntClus,MBR_RelSec, FATSz, RootClus;
 120   1        uint16_t RsvdSecCnt, RootEntCnt, temp16;
 121   1        uint8_t NumFAT, temp8;
 122   1        uint8_t * values;
 123   1        FS_values_t * Drive_p;
 124   1      
 125   1         Drive_p=Export_Drive_values();
 126   1         
 127   1         values=array_in;
 128   1         printf("Locating Boot Sector...\n\r");
 129   1         Read_Sector(0,512,values);
 130   1         temp8=read8(0,values);
 131   1         if((temp8!=0xEB)&&(temp8!=0xE9))
 132   1         {
 133   2            MBR_RelSec=read32(MBR_RelSectors,values);
 134   2          Read_Sector(MBR_RelSec,512,values);
 135   2          printf("Relative Sectors = %ld\n\r",MBR_RelSec);
 136   2          temp8=read8(0,values);
 137   2         }
 138   1         if((temp8!=0xEB)&&(temp8!=0xE9))
 139   1         {
 140   2            printf("Disk Error!\n\r");
 141   2          return Disk_Error;
 142   2         }
 143   1         Drive_p->BytesPerSec=read16(BPB_BytesPerSector,values);
 144   1         Drive_p->BytesPerSecShift=0;
 145   1         temp16=Drive_p->BytesPerSec;
 146   1         while(temp16!=0x01)
 147   1         {
 148   2            Drive_p->BytesPerSecShift++;
 149   2            temp16=temp16>>1;
 150   2         }
 151   1         Drive_p->SecPerClus=read8(BPB_SectorsPerCluster,values);
 152   1         RsvdSecCnt=read16(BPB_RsvdSectorCount,values);
 153   1         NumFAT=read8(BPB_NumberFATs,values);
 154   1         RootEntCnt=read16(BPB_RootEntryCount,values);
 155   1         TotSec=read16(BPB_TotalSectors16,values);
 156   1         if(TotSec==0) TotSec=read32(BPB_TotalSectors32,values);
 157   1         FATSz=read16(BPB_FATsize16,values);
 158   1         if(FATSz==0)
 159   1         {
 160   2          FATSz=read32(BPB_FATsize32,values);
 161   2            RootClus=read32(BPB_RootCluster,values);
 162   2         }
 163   1         Drive_p->RootDirSecs=((RootEntCnt * 32) + (Drive_p->BytesPerSec - 1))/Drive_p->BytesPerSec;
 164   1         DataSec=TotSec-(RsvdSecCnt+(NumFAT*FATSz)+Drive_p->RootDirSecs);
 165   1         CntClus=DataSec/Drive_p->SecPerClus;
 166   1         Drive_p->StartofFAT=RsvdSecCnt+MBR_RelSec;
 167   1         Drive_p->FirstDataSec=Drive_p->StartofFAT+(NumFAT*FATSz)+Drive_p->RootDirSecs;
 168   1         if(CntClus<65525)
 169   1         {
 170   2           Drive_p->FATtype=FAT16;
 171   2         Drive_p->FATshift=FAT16_shift;
 172   2         printf("FAT16 Detected...\n\r");
 173   2         Drive_p->FirstRootDirSec=Drive_p->StartofFAT+(NumFAT*FATSz);
 174   2      
 175   2         }
 176   1         else
 177   1         {
 178   2           Drive_p->FATtype=FAT32;
 179   2         Drive_p->FATshift=FAT32_shift;
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 4   

 180   2         printf("FAT32 Detected...\n\r");
 181   2           Drive_p->FirstRootDirSec=((RootClus-2)*Drive_p->SecPerClus)+Drive_p->FirstDataSec;
 182   2         }
 183   1         return No_Disk_Error;
 184   1      }
 185          
 186          
 187          /***********************************************************************
 188          DESC: Calculates the First Sector of a given Cluster 
 189          INPUT: uint32_t Cluster number
 190          RETURNS: uint32_t sector number 
 191          CAUTION: 
 192          ************************************************************************/
 193          uint32_t First_Sector (uint32_t Cluster_num)
 194          {
 195   1         uint32_t Sector_num;
 196   1         FS_values_t * Drive_p;
 197   1      
 198   1         Drive_p=Export_Drive_values();
 199   1         if(Cluster_num==0) 
 200   1         {
 201   2             Sector_num=Drive_p->FirstRootDirSec;
 202   2         }
 203   1         else
 204   1         {
 205   2             Sector_num=((Cluster_num-2)*Drive_p->SecPerClus)+Drive_p->FirstDataSec;
 206   2         }
 207   1         return Sector_num;
 208   1      }
 209          
 210          uint32_t First_Sector_ISR (uint32_t Cluster_num)
 211          {
 212   1         uint32_t idata Sector_num;
 213   1         FS_values_t * Drive_p;
 214   1      
 215   1         Drive_p=Export_Drive_values_ISR();
 216   1         if(Cluster_num==0) 
 217   1         {
 218   2             Sector_num=Drive_p->FirstRootDirSec;
 219   2         }
 220   1         else
 221   1         {
 222   2             Sector_num=((Cluster_num-2)*Drive_p->SecPerClus)+Drive_p->FirstDataSec;
 223   2         }
 224   1         return Sector_num;
 225   1      }
 226          
 227          /***********************************************************************
 228          DESC: Prints all short file name entries for a given directory 
 229          INPUT: Starting Sector of the directory and the pointer to a 
 230          block of memory in xdata that can be used to read blocks from the SD card
 231          RETURNS: uint16_t number of entries found in the directory
 232          CAUTION: Supports FAT16, SD_shift must be set before using this function
 233          ************************************************************************/
 234          
 235          /*
 236          
 237          uint16_t  Print_Directory(uint32_t Sector_num, uint8_t xdata * array_in)
 238          { 
 239             uint32_t Sector, max_sectors;
 240             uint16_t i, entries;
 241             uint8_t temp8, j, attr, out_val, error_flag;
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 5   

 242             uint8_t * values;
 243          
 244             values=array_in;
 245             entries=0;
 246             i=0;
 247             if (Sector_num<Drive_values.FirstDataSec)  // included for FAT16 compatibility
 248             { 
 249                max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
 250             }
 251             else
 252             {
 253                max_sectors=Drive_values.SecPerClus;
 254             }
 255             Sector=Sector_num;
 256             AMBERLED=0;
 257             nCS0=0;
 258             error_flag=SEND_COMMAND(17,(Sector<<Drive_values.SDtype));
 259             if(error_flag==no_errors) error_flag=read_block(values,512);
 260             nCS0=1;
 261             AMBERLED=1;
 262             if(error_flag==no_errors)
 263             {
 264                    YELLOWLED=0;
 265               do
 266               {
 267           
 268                temp8=read8(0+i,values);  // read first byte to see if empty
 269                  if((temp8!=0xE5)&&(temp8!=0x00))
 270                {  
 271                   attr=read8(0x0b+i,values);
 272                  YELLOWLED=1;
 273                 if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
 274                 {
 275                    entries++;
 276                  printf("%5d. ",entries);  // print entry number with a fixed width specifier
 277                    for(j=0;j<8;j++)
 278                  {
 279                     out_val=read8(i+j,values);   // print the 8 byte name
 280                     putchar(out_val);
 281                  }
 282                        if((attr&0x10)==0x10)  // indicates directory
 283                  {
 284                     for(j=8;j<11;j++)
 285                     {
 286                        out_val=read8(i+j,values);
 287                        putchar(out_val);
 288                     }
 289                     printf("[DIR]\n");
 290                  }
 291                  else       // print a period and the three byte extension for a file
 292                  {
 293                     putchar(0x2E);       
 294                     for(j=8;j<11;j++)
 295                     {
 296                        out_val=read8(i+j,values);
 297                        putchar(out_val);
 298                     }
 299                     putchar(0x0d);
 300                           putchar(0x0a);
 301                  }
 302                  }
 303          
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 6   

 304              }
 305              i=i+32;  // next entry
 306          
 307              if(i>510)
 308              {
 309                Sector++;
 310                    if((Sector-Sector_num)<max_sectors)
 311                {
 312                        nCS0=0;
 313                        error_flag=SEND_COMMAND(17,(Sector<<Drive_values.SDtype));
 314                        if(error_flag==no_errors) error_flag=read_block(values,512);
 315                  if(error_flag!=no_errors)
 316                    {
 317                      entries=0;   // no entries found indicates disk read error
 318                    temp8=0;     // forces a function exit
 319                    }
 320                          nCS0=1;
 321                    i=0;
 322                }
 323                else
 324                {
 325                  entries=entries|more_entries;  // set msb to indicate more entries in another cluster
 326                  temp8=0;                       // forces a function exit
 327                }
 328              }
 329                 
 330              }while(temp8!=0);
 331            }
 332            else
 333            {
 334               entries=0;    // no entries found indicates disk read error
 335            }
 336              return entries;
 337           }
 338          
 339           */
 340          
 341          /***********************************************************************
 342          DESC: Uses the same method as Print_Directory to locate short file names,
 343                but locates a specified entry and returns and cluster  
 344          INPUT: Starting Sector of the directory, an entry number and a pointer to a 
 345          block of memory in xdata that can be used to read blocks from the SD card
 346          RETURNS: uint32_t with cluster in lower 28 bits.  Bit 28 set if this is 
 347                   a directory entry, clear for a file.  Bit 31 set for error.
 348          CAUTION: 
 349          ************************************************************************/
 350          
 351          /*
 352          
 353          uint32_t Read_Dir_Entry(uint32_t Sector_num, uint16_t Entry, uint8_t xdata * array_in)
 354          { 
 355             uint32_t Sector, max_sectors, return_clus;
 356             uint16_t i, entries;
 357             uint8_t temp8, attr, error_flag;
 358             uint8_t * values;
 359          
 360             values=array_in;
 361             entries=0;
 362             i=0;
 363             return_clus=0;
 364             if (Sector_num<Drive_values.FirstDataSec)  // included for FAT16 compatibility
 365             { 
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 7   

 366                max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
 367             }
 368             else
 369             {
 370                max_sectors=Drive_values.SecPerClus;
 371             }
 372             Sector=Sector_num;
 373             nCS0=0;
 374             error_flag=SEND_COMMAND(17,(Sector<<Drive_values.SDtype));
 375             if(error_flag==no_errors)  error_flag=read_block(values,512);
 376             nCS0=1;
 377             if(error_flag==no_errors)
 378             {
 379               do
 380               {
 381                  temp8=read8(0+i,values);  // read first byte to see if empty
 382                  if((temp8!=0xE5)&&(temp8!=0x00))
 383                {  
 384                   attr=read8(0x0b+i,values);
 385                 if((attr&0x0E)==0)    // if hidden do not print
 386                 {
 387                    entries++;
 388                        if(entries==Entry)
 389                        {
 390                    if(Drive_values.FATtype==FAT32)
 391                          {
 392                             return_clus=read8(21+i,values);
 393                             return_clus&=0x0F;            // makes sure upper four bits are clear
 394                     return_clus=return_clus<<8;
 395                             return_clus|=read8(20+i,values);
 396                             return_clus=return_clus<<8;
 397                          }
 398                          return_clus|=read8(27+i,values);
 399                    return_clus=return_clus<<8;
 400                          return_clus|=read8(26+i,values);
 401                    attr=read8(0x0b+i,values);
 402                    if(attr&0x10) return_clus|=directory_bit;
 403                          temp8=0;    // forces a function exit
 404                        }
 405                        
 406                 }
 407                  }
 408              i=i+32;  // next entry
 409              if(i>510)
 410              {
 411                 Sector++;
 412                 if((Sector-Sector_num)<max_sectors)
 413                 {
 414                        nCS0=0;
 415                        error_flag=SEND_COMMAND(17,(Sector<<Drive_values.SDtype));
 416                        if(error_flag==no_errors)  error_flag=read_block(values,512);
 417                        nCS0=1;
 418                  if(error_flag!=no_errors)
 419                  {
 420                     return_clus=no_entry_found;
 421                           temp8=0; 
 422                  }
 423                  i=0;
 424                 }
 425                 else
 426                 {
 427                  temp8=0;                       // forces a function exit
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 8   

 428                 }
 429              }
 430                  
 431             }while(temp8!=0);
 432             }
 433             else
 434             {
 435             return_clus=no_entry_found;
 436             }
 437             if(return_clus==0) return_clus=no_entry_found;
 438             return return_clus;
 439          }
 440          
 441          */
 442          
 443          
 444          /***********************************************************************
 445          DESC: Finds the next cluster number of a file in the FAT with an input
 446                parameter of the current cluster number.
 447          INPUT: Current cluster number.
 448          RETURNS: Next Cluster number from the FAT
 449          CAUTION: 
 450          ************************************************************************/
 451          
 452          
 453          //uint32_t Find_Next_Clus(uint32_t Cluster_num, uint8_t xdata * array_name)
 454          //{
 455          //   uint32_t Sector, return_clus;
 456          //   uint16_t FAToffset;
 457          //   uint8_t * values;
 458          //   FS_values_t * Drive_p;
 459          
 460          //   Drive_p=Export_Drive_values();
 461          //   values=array_name;
 462          //   Sector=(Cluster_num>>(Drive_p->BytesPerSecShift-Drive_p->FATshift))+Drive_p->StartofFAT;
 463          //   Read_Sector(Sector, Drive_p->BytesPerSec,values);
 464          //   FAToffset=(uint16_t)((Cluster_num<<Drive_p->FATshift)&(Drive_p->BytesPerSec-1));
 465          //   if(Drive_p->FATtype==FAT32)    // FAT32
 466          //   {
 467          //       return_clus=(read32(FAToffset,values)&0x0FFFFFFF);
 468          //   }
 469          //   else if(Drive_p->FATtype==FAT16)    // FAT16
 470          //   {
 471          //       return_clus=(uint32_t)(read16(FAToffset,values));
 472          //   }
 473          //   return return_clus;
 474          //}
 475             
 476          uint32_t Find_Next_Clus_ISR(uint32_t Cluster_num, uint8_t xdata * array_name)
 477          {
 478   1         uint32_t idata Sector, return_clus;
 479   1         uint16_t idata FAToffset;
 480   1         uint8_t * values;
 481   1         FS_values_t * Drive_p;
 482   1      
 483   1         Drive_p=Export_Drive_values_ISR();
 484   1         values=array_name;
 485   1         Sector=(Cluster_num>>(Drive_p->BytesPerSecShift-Drive_p->FATshift))+Drive_p->StartofFAT;
 486   1         Read_Sector_ISR(Sector, Drive_p->BytesPerSec,values);
 487   1         FAToffset=(uint16_t)((Cluster_num<<Drive_p->FATshift)&(Drive_p->BytesPerSec-1));
 488   1         if(Drive_p->FATtype==FAT32)    // FAT32
 489   1         {
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 9   

 490   2             return_clus=(read32_ISR(FAToffset,values)&0x0FFFFFFF);
 491   2         }
 492   1         else if(Drive_p->FATtype==FAT16)    // FAT16
 493   1         {
 494   2             return_clus=(uint32_t)(read16_ISR(FAToffset,values));
 495   2         }
 496   1         return return_clus;
 497   1      }
 498          
 499          
 500          
 501          /***********************************************************************
 502          DESC: Prints the sectors of a file until the user hits X
 503                Prints the Cluster Number and Sector number of each sector as well
 504          INPUT: Starting Cluster of the file and the start of a 
 505          block of memory in xdata that can be used to read blocks from the SD card
 506          RETURNS: uint8_t 0
 507          CAUTION: 
 508          ************************************************************************/
 509          
 510          
 511          //uint8_t Open_File(uint32_t Cluster_num, uint8_t xdata * array_in)
 512          //{
 513          //   uint32_t Sector, SecOffset;
 514          //   uint16_t entries;
 515          //   uint8_t temp8;
 516          //   uint8_t * values;
 517          //   FS_values_t * Drive_p;
 518          
 519          //   Drive_p=Export_Drive_values();
 520          //   values=array_in;
 521          //   entries=0;
 522          //   SecOffset=0;
 523          //   
 524          //   
 525          //   do
 526          //   {
 527          //      if(SecOffset==0) Sector=((Cluster_num-2)*Drive_p->SecPerClus)+Drive_p->FirstDataSec;
 528          //      printf("Cluster#: %9lu,  Sector#: %9lu,  SecOffset: %lu\n",Cluster_num,(Sector+SecOffset),SecOffse
             -t);
 529          //      Read_Sector((Sector+SecOffset), Drive_p->BytesPerSec, values);      
 530          //      print_memory(512,values);
 531          //      SecOffset++;
 532          //      if(SecOffset==Drive_p->SecPerClus)
 533          //      {
 534          //         Cluster_num=Find_Next_Clus(Cluster_num,values);
 535          //         SecOffset=0;
 536          //      }
 537          //      printf("Press Space to Continue or X to exit\n");
 538          //      do
 539          //      {
 540          //        //temp8=getchar();
 541          //      }while((temp8!=0x20)&&(temp8!=0x58)&&(temp8!='P')&&SW1!=0&&SW2!=0);
 542          //      if(temp8=='P' || SW1 == 0)
 543          //      {
 544          //         Play_Song(Cluster_num);
 545          //      }
 546          //   }while(temp8==0x20);
 547          //   putchar(0x0d);
 548          //   putchar(0x0a);
 549          //return 0;
 550          //}
C51 COMPILER V9.53.0.0   FILE_SYSTEM_V2                                                    12/17/2015 20:55:29 PAGE 10  

 551          
 552          
 553          
 554          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1865    ----
   CONSTANT SIZE    =    105    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      90
   IDATA SIZE       =   ----      24
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
