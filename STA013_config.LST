C51 COMPILER V9.53.0.0   STA013_CONFIG                                                     12/17/2015 20:55:29 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE STA013_CONFIG
OBJECT MODULE PLACED IN STA013_config.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE STA013_config.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //***********************************      STA013_Config.c      ***********************************//
   2          
   3          
   4          #include "Main.h"
   5          #include "PORT.H"
   6          #include "I2C.h"
   7          #include "STA013_Config.h"
   8          #include <stdio.h>
   9          
  10          
  11          
  12          /***********************************************************************
  13          DESC:    Initializes the STA013 with the following steps:
  14                   Applies a hardware reset signal, checks the ID register for an 0xAC
  15               response and then sends the configuration data.
  16          RETURNS: error flag
  17          CAUTION: 
  18                    
  19          ************************************************************************/
  20          
  21          
  22          uint8_t STA013_init(void)
  23          {
  24   1         uint8_t error_flag, timeout;
  25   1         uint8_t idata send[3], rcv[3];
  26   1         uint8_t * config_data_p;
  27   1         uint16_t j;
  28   1      
  29   1         uint8_t code STA_cfg_addr[18]={0x54, 0x55,  6, 11,  82,  81, 101, 100, 80, 97, 0x05, 0x0d, 0x18, 0x0c, 
             -0x46, 0x48, 0x7d, 0x72};
  30   1         uint8_t code STA_cfg_data[18]={0x07, 0x10,  9,  2, 184,   0,   0,   0,  6,  5, 0xa1, 0x00, 0x04, 0x05, 
             -0x07, 0x07, 0x00, 0x01};
  31   1      
  32   1         extern uint8_t code CONFIG;
  33   1         extern uint8_t code CONFIG2;
  34   1      
  35   1         STA013_RESET=0;
  36   1      
  37   1         send[0]=0x01;   // address of the ID reg.  
  38   1         timeout=50;
  39   1      
  40   1         STA013_RESET=1;    // make STA013 active
  41   1         P3_4=0;
  42   1         do
  43   1         {
  44   2            error_flag=I2C_Write(STA013,1,send);
  45   2            timeout--;
  46   2            if(timeout==0) AMBERLED=0;
  47   2         }while((error_flag!=no_errors)&&(timeout!=0));
  48   1         if(timeout!=0)
  49   1         {
  50   2            timeout=50;
  51   2          do
  52   2          {
  53   3              error_flag=I2C_Read(STA013,1,rcv);
C51 COMPILER V9.53.0.0   STA013_CONFIG                                                     12/17/2015 20:55:29 PAGE 2   

  54   3              timeout--;
  55   3          }while((error_flag!=no_errors)&&(timeout!=0));
  56   2          if(timeout!=0)
  57   2          {
  58   3               printf("Output from ID register: %2.2bX \n\r",rcv[0]);
  59   3          }
  60   2         }
  61   1         P3_4=1;
  62   1      
  63   1      
  64   1      
  65   1         if(rcv[0]==0xAC)
  66   1         {
  67   2           send[0]=0x71;
  68   2           error_flag=I2C_Write(STA013,1,send);
  69   2           error_flag=I2C_Read(STA013,1,rcv);
  70   2           printf("STA013 SoftVersion: %2.2bX \n\r",rcv[0]); 
  71   2           j=0;
  72   2           config_data_p=&CONFIG;  // point to STA013 configuration file
  73   2           do
  74   2           {
  75   3              send[0]=*(config_data_p+j);
  76   3              j++;
  77   3              send[1]=*(config_data_p+j);
  78   3              j++;
  79   3              if(send[0]!=0xff)
  80   3              {
  81   4                
  82   4                 timeout=50;
  83   4                 do
  84   4                 {
  85   5                     error_flag=I2C_Write(STA013,2,send);
  86   5                     timeout--;
  87   5                     if(timeout==0) AMBERLED=0;
  88   5                 }while((error_flag!=no_errors)&&(timeout!=0));
  89   4              }
  90   3           }while((send[0]!=0xff) && (timeout!=0));
  91   2           printf("First configuration file sent...\n\r");
  92   2           printf("Number of values written: %d \n\r",j>>1);
  93   2           j=0;
  94   2           config_data_p=&CONFIG2;  // point to STA013 configuration file
  95   2           do
  96   2           {
  97   3              send[0]=*(config_data_p+j);
  98   3              j++;
  99   3              send[1]=*(config_data_p+j);
 100   3              j++;
 101   3              if(send[0]!=0xff)
 102   3              {
 103   4                 timeout=50;
 104   4                 do
 105   4                 {
 106   5                     error_flag=I2C_Write(STA013,2,send);
 107   5                     timeout--;
 108   5                     if(timeout==0) AMBERLED=0;
 109   5                 }while((error_flag!=no_errors)&&(timeout!=0));
 110   4              }
 111   3           }while((send[0]!=0xff) && (timeout!=0));
 112   2           send[0]=0x71;
 113   2           error_flag=I2C_Write(STA013,1,send);
 114   2           error_flag=I2C_Read(STA013,1,rcv);
 115   2           printf("STA013 SoftVersion: %2.2bX \n\r",rcv[0]);            
C51 COMPILER V9.53.0.0   STA013_CONFIG                                                     12/17/2015 20:55:29 PAGE 3   

 116   2              
 117   2           for(j=0;j<18;j++)
 118   2          {
 119   3            send[0]=STA_cfg_addr[j];
 120   3            send[1]=STA_cfg_data[j];
 121   3              timeout=50;
 122   3              do
 123   3              {
 124   4                  error_flag=I2C_Write(STA013,2,send);
 125   4                  timeout--;
 126   4                  if(timeout==0) AMBERLED=0;
 127   4              }while((error_flag!=no_errors)&&(timeout!=0));
 128   3          printf("Sent to STA013: %2.2bX  %2.2bX \n\r",send[0],send[1]);
 129   3              error_flag=I2C_Write(STA013,1,send);
 130   3              error_flag=I2C_Read(STA013,1,rcv);
 131   3              printf("Output from register: %2.2bX  %2.2bX %2.2bX \n\r",send[0],rcv[0],error_flag);
 132   3          }
 133   2            printf("Configuration Complete\n\r");
 134   2         }      
 135   1         return error_flag;
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    608    ----
   CONSTANT SIZE    =    274    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----       6
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
