C51 COMPILER V9.53.0.0   SPI                                                               12/17/2015 21:01:32 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN SPI.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SPI.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //***********************************      SPI.c      ***********************************//
   2          
   3          
   4          #include "Main.h"
   5          #include "PORT.H"
   6          #include "SPI.h"
   7          
   8          
   9          /***********************************************************************
  10          DESC:    Sets up the SPI to master mode with the clock as close
  11                   to the input parameter as possible.
  12                   clock=32-bit 
  13          RETURNS: Error Flag
  14          CAUTION: Sets the CPHA to 0 and CPOL to 0
  15                   Disables SS and sets master mode 
  16          ************************************************************************/
  17          
  18          uint8_t SPI_Master_Init(uint32_t clock_rate)
  19          {
  20   1        uint8_t divider,return_val;
  21   1        return_val=init_okay;
  22   1        divider=(uint8_t)(((OSC_FREQ/OSC_PER_INST)*6)/clock_rate);
  23   1        if(divider<=2)
  24   1        {
  25   2           SPCON=0x70;
  26   2        }
  27   1        else if((divider>2)&&(divider<=4))
  28   1        {
  29   2           SPCON=0x71;
  30   2        }
  31   1        else if((divider>4)&&(divider<=8))
  32   1        {
  33   2           SPCON=0x72;
  34   2        }
  35   1        else if((divider>8)&&(divider<=16))
  36   1        {
  37   2           SPCON=0x73;
  38   2        } 
  39   1        else if((divider>16)&&(divider<=32))
  40   1        {
  41   2           SPCON=0xF0;
  42   2        }
  43   1        else if((divider>32)&&(divider<=64))
  44   1        {
  45   2           SPCON=0xF1;
  46   2        }
  47   1        else if((divider>64)&&(divider<=128))
  48   1        {
  49   2           SPCON=0xF2;
  50   2        }
  51   1        else  // if the SPI clock rate is too slow, a divider cannot be found
  52   1        {
  53   2          return_val=illegal_clockrate;
  54   2        }
  55   1        return return_val;
C51 COMPILER V9.53.0.0   SPI                                                               12/17/2015 21:01:32 PAGE 2   

  56   1      }
  57          
  58          /***********************************************************************
  59          DESC:    Sends one byte using the SPI port and returns the received byte
  60                    
  61          RETURNS: SPI Error Flags | received byte
  62                   or a timeout error
  63          CAUTION: Waits for the SPI transfer to be complete
  64          ************************************************************************/
  65          
  66          
  67          uint8_t SPI_Transfer(uint8_t data_input, uint8_t * data_output)
  68          {
  69   1         uint8_t test, timeout;
  70   1         timeout=0;
  71   1         SPDAT=data_input;
  72   1         do
  73   1         {
  74   2            test=SPSTA;
  75   2          timeout++;
  76   2         }while(((test&0xF0)==0)&&(timeout!=0));
  77   1         if(timeout!=0)
  78   1         {
  79   2           if((test&0x70)==0)  // no errors
  80   2           {
  81   3               *data_output=SPDAT;
  82   3               timeout=no_errors;
  83   3           }
  84   2           else
  85   2           {
  86   3               *data_output=0xff;
  87   3               timeout=SPI_ERROR;
  88   3           }
  89   2         }
  90   1         else
  91   1         {
  92   2           *data_output=0xff;
  93   2           timeout=TIMEOUT_ERROR;
  94   2         }
  95   1         return timeout;
  96   1      }
  97           
  98          uint8_t SPI_Transfer_ISR(uint8_t data_input, uint8_t * data_output)
  99          {
 100   1         uint8_t test, timeout;
 101   1         timeout=0;
 102   1         SPDAT=data_input;
 103   1         do
 104   1         {
 105   2            test=SPSTA;
 106   2          timeout++;
 107   2         }while(((test&0xF0)==0)&&(timeout!=0));
 108   1         if(timeout!=0)
 109   1         {
 110   2           if((test&0x70)==0)  // no errors
 111   2           {
 112   3               *data_output=SPDAT;
 113   3               timeout=no_errors;
 114   3           }
 115   2           else
 116   2           {
 117   3               *data_output=0xff;
C51 COMPILER V9.53.0.0   SPI                                                               12/17/2015 21:01:32 PAGE 3   

 118   3               timeout=SPI_ERROR;
 119   3           }
 120   2         }
 121   1         else
 122   1         {
 123   2           *data_output=0xff;
 124   2           timeout=TIMEOUT_ERROR;
 125   2         }
 126   1         return timeout;
 127   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    232    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
