C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PLAY_SONG
OBJECT MODULE PLACED IN Play_Song.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Play_Song.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //***********************************      Play_Song.c      ***********************************//
   2          
   3          
   4          #include "stdio.h"
   5          #include "Main.h"
   6          #include "PORT.H"
   7          #include "SPI.h"
   8          #include "File_System_v2.h"
   9          #include "Read_Sector.h"
  10          #include "Play_Song.h"
  11          #include "SD_Card.h"
  12          extern uint8_t xdata buf1[512];
  13          extern uint8_t xdata buf2[512]; 
  14          ///*
  15          uint8_t idata state_g, play_status, temp8;
  16          uint16_t idata index1_g, index2_g;
  17          uint32_t idata sector_offset, sector, cluster_g;
  18          
  19          void Play_Song(uint32_t Start_Cluster)
  20          {
  21   1        printf("Starting Cluster = %lu\n\r",Start_Cluster);
  22   1      
  23   1        sector=First_Sector(Start_Cluster);
  24   1        printf("Starting Sector = %lu\n\r",sector);
  25   1        sector_offset=0;
  26   1      
  27   1        index1_g=0;
  28   1        Read_Sector(sector+sector_offset, 512, buf1);
  29   1      
  30   1        sector_offset++;
  31   1        index2_g=0;
  32   1         
  33   1        Read_Sector(sector+sector_offset, 512, buf2);
  34   1        
  35   1        sector_offset++;
  36   1        
  37   1        cluster_g = Start_Cluster;
  38   1        state_g = DATA_SEND_1;
  39   1        play_status = 1;
  40   1        TH2 = TIMER2H;
  41   1        RCAP2H = TIMER2H;
  42   1        TL2 = TIMER2L;
  43   1        RCAP2L = TIMER2L;
  44   1        TF0 = 0;
  45   1        T2CON = 0x00;
  46   1        TMOD |= 0x01;
  47   1        ET2 = 1;
  48   1        EA = 1;
  49   1        
  50   1        TR2 = 1;
  51   1        while(play_status != 0 && SW3 == 1)
  52   1        {
  53   2          PCON |= 0x01;
  54   2        }
  55   1        
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 2   

  56   1        TR2 = 0;
  57   1        
  58   1        
  59   1      }
  60            
  61            
  62          void timer2 (void) interrupt 5
  63          { 
  64   1        
  65   1        TR0 = 0;
  66   1        TH0 = TIMER0H;
  67   1        TL0 = TIMER0L;
  68   1        TF0 = 0;
  69   1        TR0 = 1;
  70   1        
  71   1        
  72   1          if(SW1 == 0 && state_g == PAUSE)  // Play
  73   1        {
  74   2          state_g = temp8;
  75   2        }
  76   1        if(SW2 == 0 && state_g != PAUSE) // Pause
  77   1        {
  78   2          temp8 = state_g;
  79   2          state_g = PAUSE;
  80   2        }
  81   1        
  82   1        
  83   1        if(state_g == LOAD_BUFFER_1)
  84   1        {
  85   2          if(sector_offset >= 64)
  86   2          {
  87   3            state_g = FIND_CLUSTER_1;
  88   3          }
  89   2        }
  90   1      
  91   1        if(state_g == LOAD_BUFFER_2)
  92   1        {
  93   2          if(sector_offset >= 64)
  94   2          {
  95   3            state_g = FIND_CLUSTER_2;
  96   3          }
  97   2        }
  98   1      
  99   1      
 100   1        switch(state_g)
 101   1        {
 102   2          // Data Send 1
 103   2          case DATA_SEND_1:
 104   2          {
 105   3            LED1 = 0;
 106   3            LED2 = 1;
 107   3            LED3 = 1;
 108   3            LED4 = 1;
 109   3            while((DATA_REQ == ACTIVE) && (TF0 == 0))                 
 110   3            {
 111   4              BIT_EN = 1;
 112   4              SPI_Transfer_ISR(buf1[index1_g], & temp8);              
 113   4              index1_g++;                                               
 114   4              if(index1_g > 511) // Buffer 1 empty
 115   4              {
 116   5                if(index2_g >511)
 117   5                {
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 3   

 118   6                  if(play_status == 3)                                  
 119   6                  {
 120   7                    play_status = 0;
 121   7                  }
 122   6                  else
 123   6                  {
 124   7                    state_g = LOAD_BUFFER_2; // Buff 2 and Buff 1 empty
 125   7                  }
 126   6                }                                                       
 127   5                else
 128   5                {
 129   6                  state_g = DATA_SEND_2; // BUFF 1 empty                //Seems like this is when buffer 1 still has stuff
 130   6                }
 131   5                TF0 = 1;
 132   5              }       // What does this do? is this the interupt for the whole system to keep pace
 133   4              BIT_EN = 0;
 134   4            }
 135   3            if((DATA_REQ == INACTIVE) && (state_g == DATA_SEND_1))
 136   3            {
 137   4              
 138   4              if(index2_g > 511) // Buffer 2 is empty
 139   4              {
 140   5                state_g = LOAD_BUFFER_2; // DR inactive and BUFF 2 empty
 141   5              }
 142   4              else
 143   4              {
 144   5                //state_g = DATA_SEND_1;
 145   5                state_g = DATA_IDLE_1; // DR interupt
 146   5              }
 147   4            }
 148   3            
 149   3            break;
 150   3          }
 151   2          
 152   2          //Load Buffer 1
 153   2          case LOAD_BUFFER_1:
 154   2          {
 155   3            LED1 = 1;
 156   3            LED2 = 1;
 157   3            LED3 = 0;
 158   3            LED4 = 1;
 159   3            //printf("LOAD_BUFFER_1\n\r");
 160   3            Read_Sector_ISR(sector+sector_offset, 512, buf1);
 161   3            //printf("%8.8lX", sector);
 162   3            sector_offset++;
 163   3            //state_g = DATA_SEND_2;
 164   3            state_g = DATA_IDLE_2;
 165   3            index1_g = 0;
 166   3            
 167   3            break;
 168   3          }
 169   2          
 170   2          // Find Cluster 1
 171   2          case FIND_CLUSTER_1:
 172   2          {
 173   3            LED1 = 1;
 174   3            LED2 = 1;
 175   3            LED3 = 1;
 176   3            LED4 = 0;
 177   3            //printf("FIND_CLUSTER_1\n\r");
 178   3            cluster_g = Find_Next_Clus_ISR(cluster_g, buf1);
 179   3            if(cluster_g == 0x0FFFFFFF) // Last cluster
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 4   

 180   3            {
 181   4              //printf("DONE\n\r");
 182   4              play_status = 3;
 183   4              //state_g = DATA_SEND_2;
 184   4              state_g = DATA_IDLE_2;
 185   4            }
 186   3            else
 187   3            {
 188   4              sector = First_Sector_ISR(cluster_g);
 189   4              sector_offset = 0;
 190   4              //state_g = DATA_SEND_2;
 191   4              state_g = DATA_IDLE_2;
 192   4            }
 193   3            break;
 194   3          }
 195   2          
 196   2          case DATA_IDLE_1:
 197   2          {
 198   3            LED1 = 1;
 199   3            LED2 = 1;
 200   3            LED3 = 1;
 201   3            LED4 = 1;
 202   3            //printf("DATA_IDLE_1\n\r");
 203   3            if(DATA_REQ == ACTIVE)
 204   3            {
 205   4              state_g = DATA_SEND_1;
 206   4            }
 207   3            break;
 208   3          }
 209   2              
 210   2          // Data Send 2
 211   2          case DATA_SEND_2:
 212   2          {
 213   3            LED1 = 1;
 214   3            LED2 = 0;
 215   3            LED3 = 1;
 216   3            LED4 = 1;
 217   3            //printf("DATA_SEND_2\n\r");
 218   3            
 219   3            while((DATA_REQ == ACTIVE) && (TF0 == 0))                 // Can DATA_REQ go inactive while in the loop
 220   3            {
 221   4              BIT_EN = 1;
 222   4              SPI_Transfer_ISR(buf2[index2_g], & temp8);              // What is temp8
 223   4              index2_g++;
 224   4              if(index2_g > 511) // Buffer 2 empty
 225   4              {
 226   5                if(index1_g > 511) // Buffer 1 empty
 227   5                {
 228   6                  if(play_status == 3)                                  // Works only if after FIND_CLUSTER. why?
 229   6                  {
 230   7                    play_status = 0;
 231   7                  }
 232   6                  else
 233   6                  {
 234   7                    state_g = LOAD_BUFFER_1; // Buff 1 and Buff 2 empty
 235   7                  }
 236   6                }                                                       // No FIND_CLUSTER
 237   5                else
 238   5                {
 239   6                  state_g = DATA_SEND_1; // BUFF 2 empty                //Seems like this is when buffer 2 still has stuff
 240   6                }
 241   5                TF0 = 1;                                                // What does this do? is this the interupt for the whole system to ke
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 5   

             -ep pace
 242   5              }
 243   4              BIT_EN = 0;
 244   4            }
 245   3            if((DATA_REQ == INACTIVE) && (state_g == DATA_SEND_2))
 246   3            {
 247   4              //printf("INACTIVE 2\n\r");
 248   4              if(index1_g > 511) // Buffer 1 is empty
 249   4              {
 250   5                state_g = LOAD_BUFFER_1; // DR inactive and BUFF 1 empty
 251   5              }
 252   4              else
 253   4              {
 254   5                //state_g = DATA_SEND_2;
 255   5                state_g = DATA_IDLE_2; // DR interupt
 256   5              }
 257   4            }
 258   3            
 259   3            
 260   3            break;
 261   3          }
 262   2          
 263   2          //Load Buffer 2
 264   2          case LOAD_BUFFER_2:
 265   2          {
 266   3            LED1 = 1;
 267   3        LED2 = 1;
 268   3        LED3 = 0;
 269   3        LED4 = 1;
 270   3            //printf("LOAD_BUFFER_2\n\r");
 271   3            Read_Sector_ISR(sector+sector_offset, 512, buf2);
 272   3            sector_offset++;
 273   3            //state_g = DATA_SEND_1;
 274   3            state_g = DATA_IDLE_1;
 275   3            index2_g = 0;
 276   3            break;
 277   3          }
 278   2          
 279   2          // Find Cluster 2
 280   2          case FIND_CLUSTER_2:
 281   2          {
 282   3            LED1 = 1;
 283   3        LED2 = 1;
 284   3        LED3 = 1;
 285   3        LED4 = 0;
 286   3            //printf("FIND_CLUSTER_2\n\r");
 287   3            cluster_g = Find_Next_Clus_ISR(cluster_g, buf2);
 288   3            if(cluster_g == 0x0FFFFFFF)
 289   3            {
 290   4              play_status = 3;
 291   4              //state_g = DATA_SEND_1;
 292   4              state_g = DATA_IDLE_1;
 293   4            }
 294   3            else
 295   3            {
 296   4              sector = First_Sector_ISR(cluster_g);
 297   4              sector_offset = 0;
 298   4              //state_g = DATA_SEND_1;
 299   4              state_g = DATA_IDLE_1;
 300   4            }
 301   3            break;
 302   3          }
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 6   

 303   2          
 304   2          case DATA_IDLE_2:
 305   2          {
 306   3            LED1 = 1;
 307   3        LED2 = 1;
 308   3        LED3 = 1;
 309   3        LED4 = 1;
 310   3            //printf("DATA_IDLE_2\n\r");
 311   3            if(DATA_REQ == ACTIVE)
 312   3            {
 313   4              state_g = DATA_SEND_2;
 314   4            }
 315   3            break;
 316   3          }
 317   2          case PAUSE:
 318   2          {
 319   3            //printf("%2.2bX", temp8);
 320   3            break;
 321   3          }
 322   2        }
 323   1        //trig = 1;
 324   1        TF2 = 0;
 325   1      }
 326          
 327            
 328            
 329            
 330            
 331            
 332            
 333          
 334            
 335          //   uint8_t buffer1, buffer2, temp8;
 336          //   
 337          //   AMBERLED=OFF;
 338          //   do
 339          //  {      
 340          //     do
 341          //     {
 342          //        if(DATA_REQ==0)
 343          //        {
 344          //           GREENLED=ON;
 345          //           BIT_EN=1;
 346          //           SPI_Transfer(buf1[index1], &temp8);
 347          //         GREENLED=OFF;
 348          //         index1++;
 349          //           if(index1>511)
 350          //           {
 351          //              if(index2>511)
 352          //              {
 353          //                  BIT_EN=0;              
 354          //                  AMBERLED=ON;
 355          //          index2=0;
 356          //          
 357          //          Read_Sector(sector+sector_offset, 512, buf2);
 358          //          sector_offset++;
 359          //                  AMBERLED=OFF;
 360          //              }
 361          //              buffer1=0;
 362          //              buffer2=1;
 363          
 364          //          }
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 7   

 365          //       }
 366          //       else
 367          //       {
 368          //          if(index2>511)
 369          //          {
 370          //              BIT_EN=0;
 371          //              AMBERLED=ON;
 372          //        index2=0;
 373          //        
 374          //        Read_Sector(sector+sector_offset, 512, buf2);
 375          //        sector_offset++;
 376          //              AMBERLED=OFF;
 377          //          }
 378          //          else
 379          //          {
 380          //              if(index1>511)
 381          //              {
 382          //                  buffer1=0;
 383          //                  buffer2=1;
 384          //              }
 385          //          }
 386          //      }
 387          //   }while(buffer1==1);
 388          //   do
 389          //   {
 390          //      if(DATA_REQ==0)
 391          //      {
 392          //          REDLED=ON;
 393          //          BIT_EN=1;
 394          //          SPI_Transfer(buf2[index2], &temp8);
 395          //          REDLED=OFF;
 396          //          index2++;
 397          //          if(index2>511)
 398          //          {
 399          //              if(index1>511)
 400          //              {
 401          //                  BIT_EN=0; 
 402          //                  YELLOWLED=ON;
 403          //          index1=0;
 404          //          
 405          //          Read_Sector(sector+sector_offset, 512, buf1);
 406          //          sector_offset++;
 407          //                  YELLOWLED=OFF;
 408          //              }
 409          //              buffer2=0;
 410          //              buffer1=1;
 411          //         
 412          //           }
 413          //        }
 414          //        else
 415          //        {
 416          //           if(index1>511)
 417          //           {
 418          //              BIT_EN=0; 
 419          //              YELLOWLED=ON;
 420          //        index1=0;
 421          //        
 422          //        Read_Sector(sector+sector_offset, 512, buf1);
 423          //        sector_offset++;
 424          //              YELLOWLED=OFF;
 425          //           }
 426          //           else
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 8   

 427          //           {
 428          //               if(index2>511)
 429          //               {
 430          //                  buffer2=0;
 431          //                  buffer1=1;
 432          //               }
 433          //           }
 434          //        }
 435          //      }while(buffer2==1);
 436          //  }while(sector_offset<512);
 437          ////P3_2=OFF;
 438          //} 
 439          
 440          
 441          
 442          
 443          
 444          
 445          //*/
 446          /*
 447          
 448          void Play_Song2(uint32_t Start_Cluster)
 449          {
 450             uint16_t index1;
 451             uint8_t buff_emp, * p_out;
 452             uint32_t sector, sector_offset;
 453          printf("Starting Cluster = %lu\n\r",Start_Cluster);
 454          sector=First_Sector(Start_Cluster);
 455          printf("Starting Sector = %lu\n\r",sector);
 456          //P3_2=ON;
 457          sector_offset=0;
 458          YELLOWLED=ON;
 459          nCS0=0;
 460          SEND_COMMAND(17,sector+sector_offset);
 461          read_block(512,buf1);
 462          index1=0;
 463          sector_offset++;
 464          nCS0=1;
 465          YELLOWLED=OFF;
 466          //AMBERLED=ON;
 467          //nCS0=0;
 468          //SEND_COMMAND(17,sector+sector_offset);
 469          //read_block(buf2,512);
 470          //sector_offset++;
 471          //nCS0=1;
 472          //AMBERLED=OFF;
 473          
 474          
 475             p_out=buf1;
 476             buff_emp=0;
 477             do
 478             {
 479                if(DATA_REQ==0)
 480                {
 481                   GREENLED=ON;
 482                   BIT_EN=1;
 483                   while((SPSTA&0x80)!=0x80);
 484                   SPDAT=*(buf1+index1);
 485                   index1++;
 486                   if(index1==512)
 487                   {
 488                      buff_emp|=1;           
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 9   

 489                   }
 490               if(index1==1024)
 491               {
 492                  index1=0;
 493                buff_emp|=2;
 494                 }
 495                   if(index1==768)
 496                   {
 497                     BIT_EN=0;
 498                     GREENLED=OFF;
 499                     if((buff_emp & 0x01)==0x01)
 500                     {
 501                        YELLOWLED=ON;
 502                        nCS0=0;
 503                        SEND_COMMAND(17,sector+sector_offset);
 504                        read_block(512,buf1);
 505                        nCS0=1;             
 506                        YELLOWLED=OFF;
 507                        buff_emp &= 0xFE;
 508                        sector_offset++;            
 509                     }
 510                   }
 511                   if(index1==256)
 512                   {
 513                     BIT_EN=0;
 514                     GREENLED=OFF;
 515                     if((buff_emp & 0x02)==0x02)
 516                     {
 517                        AMBERLED=ON;
 518                        nCS0=0;
 519                        SEND_COMMAND(17,sector+sector_offset);
 520                        read_block(512,buf2);
 521                        nCS0=1;             
 522                        AMBERLED=OFF;
 523                        buff_emp &= 0xFD;
 524                        sector_offset++;            
 525                     }
 526                   }                        
 527                 }
 528                 else
 529                 {
 530                    GREENLED=OFF;
 531                    BIT_EN=0;
 532                    if((buff_emp & 0x01)==0x01)
 533                    {
 534                       YELLOWLED=ON;
 535                       nCS0=0;
 536                       SEND_COMMAND(17,sector+sector_offset);
 537                       read_block(512,buf1);
 538                       nCS0=1;             
 539                       YELLOWLED=OFF;
 540                       buff_emp &= 0xFE;
 541                       sector_offset++;
 542           //            print_hex(1);
 543           //            print_hex(i);
 544                      
 545                    }
 546                    else if((buff_emp & 0x02)==0x02)
 547                    {
 548                       AMBERLED=ON;
 549                       nCS0=0;
 550                       SEND_COMMAND(17,sector+sector_offset);
C51 COMPILER V9.53.0.0   PLAY_SONG                                                         12/17/2015 21:01:32 PAGE 10  

 551                       read_block(512,buf2);
 552                       nCS0=1;             
 553                       AMBERLED=OFF;
 554                       buff_emp &= 0xFD;
 555                       sector_offset++;
 556                    }
 557                 }
 558             }while(sector_offset<128);   
 559             GREENLED=1;
 560          //   P3_2=OFF;
 561            }  
 562          
 563           */  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1111    ----
   CONSTANT SIZE    =     49    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =     19    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
